// <auto-generated />
using System;
using Log_Analyzer_API.Data.AppDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Log_Analyzer_API.Migrations
{
    [DbContext(typeof(LogDbContext))]
    partial class LogDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LogAnalyzerLibrary.Entities.Directory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DirectoryNamePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Directories");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Directory");
                });

            modelBuilder.Entity("LogAnalyzerLibrary.Entities.Log", b =>
                {
                    b.HasBaseType("LogAnalyzerLibrary.Entities.Directory");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("Log");
                });

            modelBuilder.Entity("LogAnalyzerLibrary.Entities.LogFile", b =>
                {
                    b.HasBaseType("LogAnalyzerLibrary.Entities.Directory");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LogFilePath1");

                    b.Property<int>("LogFileSize")
                        .HasColumnType("int");

                    b.Property<bool>("NeedsToBeUploaded")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("LogFile");
                });

            modelBuilder.Entity("LogAnalyzerLibrary.Entities.ArchivedLog", b =>
                {
                    b.HasBaseType("LogAnalyzerLibrary.Entities.LogFile");

                    b.Property<string>("archivedFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ArchivedLog");
                });
#pragma warning restore 612, 618
        }
    }
}
